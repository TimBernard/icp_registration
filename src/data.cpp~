#include "data.hpp"

// find number of points
int getNumPoints(std::ifstream& file){
  
  int num_points = 0;
  int num_lines = 4;
  
  std::string line;
  for(int i = 0; i < num_lines; ++i){
    getline(file, line);
  }
  std::getline(file, line);
  num_points = std::stoi(line.substr(7,5));
    
  return num_points;  
}

// Return Nx3 matrix representing point set 
Eigen::MatrixXd getMatrix(std::ifstream& file){

  // Find the number of points and initialize Nx3 matrix
  int num_points = getNumPoints(file);
  
  // Information on what line, how many lines to skip
  int count = 0;
  int skip_count = 4;
  std::string line;

  // vector for conversion later
  std::vector<double> coords;
  coords.reserve(num_points*3);
  
  while(std::getline(file,line)){

    if(count < 4){ continue; }
    else if(count > (skip_count+num_points)){break;}
    else{
      std::stringstream line_ss(line);
      double coord;
      while(line_ss >> coord){
	coords.push_back(coord);
      }
    }
    count++;
    
  }
  std::vector<float> test_vector = { 2,1,3 };
  //Eigen::MatrixX3d point_set = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, 3> >(coords.data());
  //point_set = Eigen::Map<Eigen::Matrix<double, Eigen::Dynamic, 3> >(coords.data());
  //Eigen::MatrixXd point_set(num_points,3);
  //point_set = Eigen::Map<Eigen::MatrixXd>(coords.data());

  //point_set = Eigen::Map<Eigen::MatrixXd>(coords.data());

  
  //std::cout << point_set << std::endl;
  return point_set;
}

